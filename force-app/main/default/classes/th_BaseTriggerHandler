public abstract class th_BaseTriggerHandler {
    public void run() {
        System.debug(LoggingLevel.INFO, '### trigger start: ' + getObjectName + ' ' + Trigger.operationType.name());

        switch on Trigger.operationType {
            when BEFORE_INSERT  { this.beforeInsert();  }
            when AFTER_INSERT   { this.afterInsert();   }
            when BEFORE_UPDATE  { this.beforeUpdate();  }
            when AFTER_UPDATE   { this.afterUpdate();   }
            when BEFORE_DELETE  { this.beforeDelete();  }
            when AFTER_DELETE   { this.afterDelete();   }
            when AFTER_UNDELETE { this.afterUndelete(); }
        }
    }


    protected virtual void beforeInsert();
    protected virtual void afterInsert();
    protected virtual void beforeUpdate();
    protected virtual void afterUpdate();
    protected virtual void beforeDelete();
    protected virtual void afterDelete();
    protected virtual void afterUndelete();


// ======================================
//  トリガハンドラ内部処理用メソッド
// ======================================
    /** 項目値設定メソッド */
    protected List<SObject> putFieldValue(List<SObject> objList, Schema.SObjectField field, Object value) {
        for (SObject obj : objList) {
            obj.put(field, value);
        }
        return objList;
    }


    /** 複数レコードaddErrorメソッド */
    protected void addError(List<SObject> objs, String msg) {
        for (SObject obj : objs) {
            obj.addError(msg);
        }
    }


    /** ID変換メソッド */
    protected List<Id> toIdList(List<SObject> objs) {
        List<Id> idList = new List<Id>();
        for (SObject obj : objs) {
            idList.add(obj.Id);
        }
        return idList;
    }


// ===================
//  変更判定
// ===================
    /** newObj と oldObj の項目fieldの変更有無 */
    protected Boolean isChanged(SObject oldObj, SObject newObj, Schema.SObjectField field) {
        return newObj.get(field) != oldObj.get(field);
    }


    /** newObj と oldObj の 項目リストfieldsのいずれかの項目にに変更有無 */
    protected Boolean isChangedAnyFields(SObject oldObj, SObject newObj, List<Schema.SObjectField> fields) {
        for (Schema.SObjectField field : fields) {
            if (isChanged(oldObj, newObj, field)) {
                return true;
            }
        }
        return false;
    }


    /** newObj と oldObj の 項目リストfieldsのいずれかの項目にに変更有無 */
    protected Boolean isChangedAnyFields(SObject oldObj, SObject newObj, Schema.FieldSet fieldSet) {
        return isChangedAnyFields(oldObj, newObj, UL_FieldUtil.toFieldTokenList(fieldSet));
    }


// ===================
//  レコード抽出
// ===================
    /** レコード抽出メソッド */
    protected List<SObject> selectObjs(List<SObject> objList, Schema.SObjectField field, Object value) {
        List<SObject> targetObjs = new List<SObject>();
        for (SObject obj : objList) {
            if (obj.get(field) == value) {
                targetObjs.add(obj);
            }
        }
        return targetObjs;
    }


    /** newMap のうち 項目fieldに変更があるオブジェクトのリストを返却する */
    protected List<SObject> selectChangedObjs(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, Schema.SObjectField field) {
        return selectChangedObjsAnyFields(oldMap, newMap, new List<Schema.SObjectField>{ field }, true);
    }


    /** newMap のうち 項目リストfieldsのいずれかの項目にに変更があるオブジェクトのリストを返却する */
    protected List<SObject> selectChangedObjsAnyFields(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, List<Schema.SObjectField> fields) {
        return selectChangedObjsAnyFields(oldMap, newMap, fields, true);
    }


    /** newMap のうち 項目リストfieldsのいずれかの項目にに変更があるオブジェクトのリストを返却する */
    protected List<SObject> selectChangedObjsAnyFields(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, Schema.FieldSet fieldSet) {
        return selectChangedObjsAnyFields(oldMap, newMap, UL_FieldUtil.toFieldTokenList(fieldSet), true);
    }


    /** newMap のうち 項目tokenに変更があり、値がvalueのオブジェクトのリストを返却する */
    protected List<SObject> selectChangedObjs(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, Schema.SObjectField field, Object value) {
        List<SObject> tList = new List<SObject>();
        for (Id objId : newMap.keySet()) {
            if (newMap.get(objId).get(field) != value) { continue; }

            if (isChanged(oldMap.get(objId), newMap.get(objId), field)) {
                tList.add(newMap.get(objId));
            }
        }
        return tList;
    }


    protected List<SObject> selectChangedObjsAnyFields(Map<Id, SObject> oldMap, Map<Id, SObject> newMap, List<Schema.SObjectField> fields, Boolean isNew) {
        List<SObject> tList = new List<SObject>();
        for (Id objId : newMap.keySet()) {
            SObject oldObj = oldMap.get(objId);
            SObject newObj = newMap.get(objId);

            for (SObjectField field : fields) {
                if (isChanged(oldObj, newObj, field)) {
                    if (isNew) {
                        tList.add(newObj);
                    } else {
                        tList.add(oldObj);
                    }
                    break;
                }
            }
        }
        return tList;
    }


// ===================
//  内部メソッド
// ===================
    private String getObjectName() {
        Schema.SObjectType token = (!Trigger.new.isEmpty()) ? Trigger.new[0].getSObjectType() : Trigger.old[0].getSObjectType();
        return token.getDescribe().getName();
    }
}
